---
layout: post
title: "Paged Grid with Knockout.js and WebApi"
date: 2012-12-01 20:09:00 +0100
comments: true
published: true
categories: ["blog", "archives"]
tags: ["JQuery", "Knockout.js", "WebApi"]
alias: ["/post/Paged-Grid-with-Knockoutjs-and-WebApi", "/post/paged-grid-with-knockoutjs-and-webapi"]
---
<!-- more -->
{% include imported_disclaimer.html %}
<p>I want to see how easily you can create a custom grid that uses an WebApi as datasource and that allows the user to page the data and also allow them to choose a page size for the grid. </p>
<h1>&nbsp;</h1>
<h1>The WebApi</h1>
<p>The WebApi will return a viewmodel that contains an array of names (string) and a property that specifies how many pages that there are available.</p>
<pre class="code"><span style="background: white; color: blue;">public class </span><span style="background: white; color: #2b91af;">NamesGridViewModel<br />    </span><span style="background: white; color: black;">{<br />        </span><span style="background: white; color: blue;">public </span><span style="background: white; color: #2b91af;">IEnumerable</span><span style="background: white; color: black;">&lt;</span><span style="background: white; color: #2b91af;">String</span><span style="background: white; color: black;">&gt; Names { </span><span style="background: white; color: blue;">get</span><span style="background: white; color: black;">; </span><span style="background: white; color: blue;">set</span><span style="background: white; color: black;">; }<br /><br />        </span><span style="background: white; color: blue;">public int </span><span style="background: white; color: black;">NumberOfPages { </span><span style="background: white; color: blue;">get</span><span style="background: white; color: black;">; </span><span style="background: white; color: blue;">set</span><span style="background: white; color: black;">; }<br />    }</span></pre>
<p><br />The WebApi itself will contain a method that accepts 2 parameters. The parameters will be page (the page that we request) and pagesize (how many entries a page contains). This method will be responsible for calculating how many pages there are and to serve the requested names based on the 2 parametes.</p>
<pre class="code"><span style="background: white; color: blue;">public class </span><span style="background: white; color: #2b91af;">ValuesController </span><span style="background: white; color: black;">: </span><span style="background: white; color: #2b91af;">ApiController<br />    </span><span style="background: white; color: black;">{<br />        </span><span style="background: white; color: blue;">public </span><span style="background: white; color: #2b91af;">IList</span><span style="background: white; color: black;">&lt;</span><span style="background: white; color: #2b91af;">String</span><span style="background: white; color: black;">&gt; Names<br />        {<br />            </span><span style="background: white; color: blue;">get </span><span style="background: white; color: black;">{ </span><span style="background: white; color: blue;">return new </span><span style="background: white; color: #2b91af;">List</span><span style="background: white; color: black;">&lt;</span><span style="background: white; color: #2b91af;">String</span><span style="background: white; color: black;">&gt; { </span><span style="background: white; color: #a31515;">"Fred"</span><span style="background: white; color: black;">, </span><span style="background: white; color: #a31515;">"Barney"</span><span style="background: white; color: black;">, </span><span style="background: white; color: #a31515;">"Betty"</span><span style="background: white; color: black;">, </span><span style="background: white; color: #a31515;">"Wilma"</span><span style="background: white; color: black;">, </span><span style="background: white; color: #a31515;">"Bart"</span><span style="background: white; color: black;">, </span><span style="background: white; color: #a31515;">"Lisa"</span><span style="background: white; color: black;">, </span><span style="background: white; color: #a31515;">"Maggie"</span><span style="background: white; color: black;">, </span><span style="background: white; color: #a31515;">"Homer"</span><span style="background: white; color: black;">, </span><span style="background: white; color: #a31515;">"Marge" </span><span style="background: white; color: black;">}; }<br />        }<br />            <br />        </span><span style="background: white; color: blue;">public </span><span style="background: white; color: #2b91af;">NamesGridViewModel </span><span style="background: white; color: black;">Get(</span><span style="background: white; color: blue;">int </span><span style="background: white; color: black;">page, </span><span style="background: white; color: blue;">int </span><span style="background: white; color: black;">pagesize)<br />        {<br />            </span><span style="background: white; color: blue;">return new </span><span style="background: white; color: #2b91af;">NamesGridViewModel<br />                       </span><span style="background: white; color: black;">{<br />                           </span><span style="background: white; color: green;">// get the request names for the specific page<br />                           </span><span style="background: white; color: black;">Names = (0 == page? </span><span style="background: white; color: blue;">null </span><span style="background: white; color: black;">: Names.Skip((page - 1)*pagesize).Take(pagesize).ToArray())<br />                           ,<br />                           </span><span style="background: white; color: green;">// calculated number of pages and ceil the value<br />                           </span><span style="background: white; color: black;">NumberOfPages = ((</span><span style="background: white; color: blue;">int</span><span style="background: white; color: black;">) </span><span style="background: white; color: #2b91af;">Math</span><span style="background: white; color: black;">.Ceiling((</span><span style="background: white; color: blue;">double</span><span style="background: white; color: black;">) Names.Count/pagesize))<br />                       };<br />        }<br />    }</span></pre>
<p>&nbsp;</p>
<h1>The client</h1>
<p><br />The client will need a reference to kockout.js. With <a href="http://knockoutjs.com/" target="_blank">knockout.js</a> it is possible to apply the MVVM pattern and also work with templates in javascript.<br /><br /></p>
<h2>&nbsp;</h2>
<p>&nbsp;</p>
<h2>The UI</h2>
<pre class="code"><span style="background: white; color: black;">Page size: </span><span style="background: white; color: blue;">&lt;</span><span style="background: white; color: maroon;">select </span><span style="background: white; color: red;">data-bind</span><span style="background: white; color: blue;">="options: availablePageSize, optionsText: $data, value: selectedPageSize"&gt;&lt;/</span><span style="background: white; color: maroon;">select</span><span style="background: white; color: blue;">&gt;</span><span style="background: white; color: darkgreen;">&lt;!-- the grid --&gt;</span><span style="background: white; color: blue;">&lt;</span><span style="background: white; color: maroon;">table </span><span style="background: white; color: red;">data-bind</span><span style="background: white; color: blue;">="with: namesGridViewModel"&gt;<br />    &lt;</span><span style="background: white; color: maroon;">thead</span><span style="background: white; color: blue;">&gt;<br />        &lt;</span><span style="background: white; color: maroon;">tr</span><span style="background: white; color: blue;">&gt;<br />            &lt;</span><span style="background: white; color: maroon;">th</span><span style="background: white; color: blue;">&gt;<br />                </span><span style="background: white; color: black;">Name<br />            </span><span style="background: white; color: blue;">&lt;/</span><span style="background: white; color: maroon;">th</span><span style="background: white; color: blue;">&gt;<br />        &lt;/</span><span style="background: white; color: maroon;">tr</span><span style="background: white; color: blue;">&gt;<br />    &lt;/</span><span style="background: white; color: maroon;">thead</span><span style="background: white; color: blue;">&gt;<br />    &lt;</span><span style="background: white; color: maroon;">tbody </span><span style="background: white; color: red;">data-bind</span><span style="background: white; color: blue;">="foreach: Names"&gt;<br />        &lt;</span><span style="background: white; color: maroon;">tr</span><span style="background: white; color: blue;">&gt;<br />            &lt;</span><span style="background: white; color: maroon;">td </span><span style="background: white; color: red;">data-bind</span><span style="background: white; color: blue;">="text: $data"&gt;<br />            &lt;/</span><span style="background: white; color: maroon;">td</span><span style="background: white; color: blue;">&gt;<br />        &lt;/</span><span style="background: white; color: maroon;">tr</span><span style="background: white; color: blue;">&gt;<br />    &lt;/</span><span style="background: white; color: maroon;">tbody</span><span style="background: white; color: blue;">&gt;<br />&lt;/</span><span style="background: white; color: maroon;">table</span><span style="background: white; color: blue;">&gt;</span><span style="background: white; color: darkgreen;">&lt;!--Contains the page links--&gt;</span><span style="background: white; color: blue;">&lt;</span><span style="background: white; color: maroon;">div </span><span style="background: white; color: red;">id</span><span style="background: white; color: blue;">="pager"&gt;&lt;/</span><span style="background: white; color: maroon;">div</span><span style="background: white; color: blue;">&gt;</span></pre>
<p>&nbsp;</p>
<h2>The Javascript</h2>
<pre class="code"><span style="background: white; color: blue;">&lt;</span><span style="background: white; color: maroon;">script </span><span style="background: white; color: red;">type</span><span style="background: white; color: blue;">="text/javascript"&gt;<br />    </span><span style="background: white; color: green;">// Our  ViewModel.<br />    </span><span style="background: white; color: blue;">function </span><span style="background: white; color: black;">pageViewModel() {<br />        </span><span style="background: white; color: blue;">var </span><span style="background: white; color: black;">self = </span><span style="background: white; color: blue;">this</span><span style="background: white; color: black;">;<br />        self.namesGridViewModel = ko.observable(); </span><span style="background: white; color: green;">// contains the viewmodel returned by the WebApi<br />        </span><span style="background: white; color: black;">self.selectedPageSize = ko.observable(3); </span><span style="background: white; color: green;">// contains the selected page size, default value is 3<br />        </span><span style="background: white; color: black;">self.availablePageSize = ko.observableArray([1, 2, 3, 4, 5]); </span><span style="background: white; color: green;">// contains the available page sizes a user can select<br />        </span><span style="background: white; color: black;">self.selectedPage = ko.observable(1); </span><span style="background: white; color: green;">// contains the selected page<br /><br />        // Add a click event to all future element with a class "pageIndex". This event will fire<br />        // when the user clicks a specific page.<br />        </span><span style="background: white; color: black;">$(</span><span style="background: white; color: #a31515;">"#pager"</span><span style="background: white; color: black;">).on(</span><span style="background: white; color: #a31515;">"click"</span><span style="background: white; color: black;">, </span><span style="background: white; color: #a31515;">".pageIndex"</span><span style="background: white; color: black;">, </span><span style="background: white; color: blue;">function </span><span style="background: white; color: black;">(event) {<br />            </span><span style="background: white; color: green;">// set the selected page in the viewModel<br />            </span><span style="background: white; color: black;">self.selectedPage($(</span><span style="background: white; color: blue;">this</span><span style="background: white; color: black;">).text());<br />        });<br /><br />        </span><span style="background: white; color: green;">// This function will be used to get the data from our WebApi. The requested page and page size are passed<br />        // as a parameter. The result will be stored in the namesGridViewModel property. This will cause that the subscribe event<br />        // for the namesGridViewModel will be fired ==&gt; the page links will be created.<br />        </span><span style="background: white; color: black;">self.navigate = </span><span style="background: white; color: blue;">function </span><span style="background: white; color: black;">() {<br />            $.get(</span><span style="background: white; color: #a31515;">"/api/values?page=" </span><span style="background: white; color: black;">+ self.selectedPage() + </span><span style="background: white; color: #a31515;">"&amp;pagesize=" </span><span style="background: white; color: black;">+ self.selectedPageSize(), self.namesGridViewModel);<br />        };<br /><br />        </span><span style="background: white; color: green;">// Function that will subscribe to all the needed events.<br />        </span><span style="background: white; color: black;">self.SubscribeToEvents = </span><span style="background: white; color: blue;">function </span><span style="background: white; color: black;">() {<br /><br />            </span><span style="background: white; color: green;">// This event will fire when selectedPageSize is changed.<br />            </span><span style="background: white; color: black;">self.selectedPageSize.subscribe(</span><span style="background: white; color: blue;">function </span><span style="background: white; color: black;">(newValue) {<br />                self.selectedPage(1);<br />                self.navigate();<br />            });<br /><br />            </span><span style="background: white; color: green;">// This event will be fired when the selectedPage is changed.<br />            </span><span style="background: white; color: black;">self.selectedPage.subscribe(</span><span style="background: white; color: blue;">function </span><span style="background: white; color: black;">(newValue) {<br />                self.navigate();<br />            });<br /><br />            </span><span style="background: white; color: green;">// This event will fire when a new value is defined for the namesGridViewModel.<br />            // It will create the page links below the grid.<br />            </span><span style="background: white; color: black;">self.namesGridViewModel.subscribe(</span><span style="background: white; color: blue;">function </span><span style="background: white; color: black;">(newValue) {<br />                </span><span style="background: white; color: blue;">var </span><span style="background: white; color: black;">numberOfPages = newValue.NumberOfPages;<br />                </span><span style="background: white; color: blue;">var </span><span style="background: white; color: black;">$pager = $(</span><span style="background: white; color: #a31515;">"#pager"</span><span style="background: white; color: black;">);<br />                </span><span style="background: white; color: green;">// clear the pager<br />                </span><span style="background: white; color: black;">$pager.html(</span><span style="background: white; color: #a31515;">""</span><span style="background: white; color: black;">);<br />                </span><span style="background: white; color: green;">// created the pages the user can click on<br />                </span><span style="background: white; color: blue;">for </span><span style="background: white; color: black;">(</span><span style="background: white; color: blue;">var </span><span style="background: white; color: black;">i = 1; i &lt;= numberOfPages; i++) {<br />                    </span><span style="background: white; color: blue;">var </span><span style="background: white; color: black;">link = $(</span><span style="background: white; color: #a31515;">'&lt;a class="pageIndex"&gt;' </span><span style="background: white; color: black;">+ i + </span><span style="background: white; color: #a31515;">'&lt;/a&gt;'</span><span style="background: white; color: black;">);<br />                    $pager.append(link);<br />                }<br />            }, </span><span style="background: white; color: blue;">this</span><span style="background: white; color: black;">);<br />        };<br />        <br />        </span><span style="background: white; color: green;">// This function will be used to kick start everything.<br />        </span><span style="background: white; color: black;">self.bind = </span><span style="background: white; color: blue;">function </span><span style="background: white; color: black;">() {<br />            self.SubscribeToEvents();<br />            self.navigate();<br />            ko.applyBindings(self);<br />        }<br />    }<br />    </span><span style="background: white; color: green;">// Create the viewModel and bind it.<br />    </span><span style="background: white; color: black;">$(</span><span style="background: white; color: blue;">function </span><span style="background: white; color: black;">() { </span><span style="background: white; color: blue;">new </span><span style="background: white; color: black;">pageViewModel().bind(); })</span><span style="background: white; color: blue;">&lt;/</span><span style="background: white; color: maroon;">script</span><span style="background: white; color: blue;">&gt;</span></pre>
<p>&nbsp;</p>
<h1>The result</h1>
<p><br /><a href="http://lh5.ggpht.com/-A1kkAPkQ4rQ/ULpj583zJFI/AAAAAAAAAG0/om6t22SmlkE/s1600-h/image%25255B5%25255D.png"><img style="display: block; float: none; margin-left: auto; margin-right: auto; border-width: 0px;" title="image" src="http://lh5.ggpht.com/--oGl5nyMxDQ/ULpj6qkQO2I/AAAAAAAAAG4/j7cYsdDToPY/image_thumb%25255B2%25255D.png?imgmax=800" alt="image" width="625" height="246" border="0" /></a> <br /><br /></p>
<h1>Summary</h1>
<p><br />You have seen how to create a basic paging grid using Knockout.js.You can easily extend this example to also allow sorting. The solution can be downloaded <a href="http://dl.dropbox.com/u/41091233/Blog/Paged%20Grid%20with%20Knockout.js%20and%20WebApi/WebApi-Knockout.js-Paging%20Grid.rar" target="_blank">here</a>.</p>
