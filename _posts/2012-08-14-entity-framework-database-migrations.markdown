---
layout: post
title: "Entity Framework: Database Migrations"
date: 2012-08-14 10:21:00 +0200
comments: true
published: true
categories: ["blog", "archives"]
tags: ["Database migrations", "EF", "Entity Framework"]
alias: ["/post/Entity-Framework-Database-Migrations", "/post/entity-framework-database-migrations"]
---
<!-- more -->
{% include imported_disclaimer.html %}
<p>If you don&rsquo;t like writing SQL DDL statement, like me, than Entity Framework is very handy. With the Code-First, you can write your model and don&rsquo;t need to worry about your database. It is generated for you by Entity Framework. This is very handy but what if you are working with an existing database? Or if you need to support different versions of your database? That is where database migrations come in to play.</p>
<h1>Before we start</h1>
<ol>
<li>Create an Asp.Net MVC 4 application</li>
<li>Use Nuget to install the latest version of the Entity Framework (5.0.0-rc)</li>
</ol>
<p>Because i am not running an SQL Express or SQL Server on my machine, i am also going to install SqlServerCompact so i can work with an SDF file. This needs a little more configuration.</p>
<ol>
<li>Install EntityFramework.SqlServerCompact form Nuget.</li>
<li>Change the connectionstring in the web.config<br />&nbsp; <span style="color: blue;">&lt;</span><span style="color: #a31515;">connectionStrings</span><span style="color: blue;">&gt;<br />&nbsp;&nbsp;&nbsp; &lt;</span><span style="color: #a31515;">add </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">DefaultConnection</span>" <span style="color: red;">connectionString</span><span style="color: blue;">=</span>"<span style="color: blue;">Data Source=|DataDirectory|\DBTest.sdf;Max Database Size=2047</span>" <span style="color: red;">providerName</span><span style="color: blue;">=</span>"<span style="color: blue;">System.Data.SqlServerCe.4.0</span>" <span style="color: blue;">/&gt;&nbsp;&nbsp;&nbsp; <br />&nbsp; &lt;/</span><span style="color: #a31515;">connectionStrings</span><span style="color: blue;">&gt;</span></li>
</ol>
<p>Create your models. In my case i will create as Car and Make class.</p>
<pre class="code"><span style="color: blue;">namespace </span>EF_DatabaseMigrations.Models<br />{<br />    <span style="color: blue;">public class </span><span style="color: #2b91af;">Car<br />    </span>{<br />        <span style="color: blue;">public </span><span style="color: #2b91af;">Int32 </span>Id { <span style="color: blue;">get</span>; <span style="color: blue;">set</span>; }<br /><br />        <span style="color: blue;">public </span><span style="color: #2b91af;">String </span>Model { <span style="color: blue;">get</span>; <span style="color: blue;">set</span>; }<br /><br />        <span style="color: blue;">public </span><span style="color: #2b91af;">Make </span>Make { <span style="color: blue;">get</span>; <span style="color: blue;">set</span>; }<br />    }<br /><br />    <span style="color: blue;">public class </span><span style="color: #2b91af;">Make<br />    </span>{<br />        <span style="color: blue;">public </span><span style="color: #2b91af;">Int32 </span>Id { <span style="color: blue;">get</span>; <span style="color: blue;">set</span>; }<br /><br />        <span style="color: blue;">public </span><span style="color: #2b91af;">String </span>Name { <span style="color: blue;">get</span>; <span style="color: blue;">set</span>; }<br />    }<br />}</pre>
<p>&nbsp;</p>
<p>Next i will create a DbDatasource that will map my entities to the database. This datasource will pass the name of the connectionstring to the base constructor.</p>
<pre class="code"><span style="color: blue;">namespace </span>EF_DatabaseMigrations.DB<br />{<br />    <span style="color: blue;">public class </span><span style="color: #2b91af;">DbDatasource </span>: <span style="color: #2b91af;">DbContext<br />    </span>{<br />        <span style="color: blue;">public </span>DbDatasource()<br />            : <span style="color: blue;">base</span>(<span style="color: #a31515;">"DefaultConnection"</span>)<br />        { }<br /><br />        <span style="color: blue;">public </span><span style="color: #2b91af;">DbSet</span>&lt;<span style="color: #2b91af;">Car</span>&gt; Cars { <span style="color: blue;">get</span>; <span style="color: blue;">set</span>; }<br /><br />        <span style="color: blue;">public </span><span style="color: #2b91af;">DbSet</span>&lt;<span style="color: #2b91af;">Make</span>&gt; Makes { <span style="color: blue;">get</span>; <span style="color: blue;">set</span>; }<br />    }<br />}</pre>
<p>&nbsp;</p>
<h1>Let&rsquo;s migrate</h1>
<p>&nbsp;</p>
<p>To configure your application to use migrations, you have to type &ldquo;enable-migrations&rdquo; command in the Package Manager Console. This will create a Migrations folder that contains a Configuration file. This class contains a seed method that accepts the DbDatasource as a parameter. The seed method will always be execute when you update your database. This method will typically be used to create users in the database or in our case to create the Makes in our database.&nbsp; By default, AutomaticMigrationsEnabled will be set to false. Since we want to automate everything, we need to set it to true :-).</p>
<p>&nbsp;</p>
<blockquote>
<pre class="code"><span style="color: blue;">namespace </span>EF_DatabaseMigrations.Migrations<br />{<br />    <span style="color: blue;">internal sealed class </span><span style="color: #2b91af;">Configuration </span>: <span style="color: #2b91af;">DbMigrationsConfiguration</span>&lt;EF_DatabaseMigrations.DB.<span style="color: #2b91af;">DbDatasource</span>&gt;<br />    {<br />        <span style="color: blue;">public </span>Configuration()<br />        {<br />            AutomaticMigrationsEnabled = <span style="color: blue;">true</span>;<br />        }<br /><br />        <span style="color: blue;">protected override void </span>Seed(EF_DatabaseMigrations.DB.<span style="color: #2b91af;">DbDatasource </span>context)<br />        {<br />            context.Makes.AddOrUpdate(m =&gt; m.Name, <span style="color: blue;">new </span><span style="color: #2b91af;">Make </span>{ Name = <span style="color: #a31515;">"Ford" </span>}<br />                                                 , <span style="color: blue;">new </span><span style="color: #2b91af;">Make </span>{ Name = <span style="color: #a31515;">"Opel" </span>}<br />                                                 , <span style="color: blue;">new </span><span style="color: #2b91af;">Make </span>{ Name = <span style="color: #a31515;">"BMW" </span>});<br />        }<br />    }<br />}</pre>
</blockquote>
<p>&nbsp;</p>
<p>Because the Seed method is always called, we have to make sure that the Makes we are adding, only are getting inserted if they don&rsquo;t exists or are updated when they do exists the database. That is why we are using the AddOrUpdate methode. The first parameter is in fact our condition for the insert or update. If a make with a name &ldquo;Ford&rdquo; doesn&rsquo;t exists in the database, it is inserted. If it does exists, it gets updated.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>When we type &ldquo;update-database&rdquo; command in the Package Manager Console, EF will create our database and will call the Seed method. The location of the database will be determined by the connectionstring that you specify. In our case it will be found in the App_Data folder.</p>
<p>&nbsp;</p>
<p>When we open the database, we see that a Cars and a Makes table are created. The Makes table is pre-filled.</p>
<p>&nbsp;</p>
<p>&nbsp;<a href="http://lh6.ggpht.com/-vKhzBJYgJuc/UComVwfwiyI/AAAAAAAAAGE/OYdpaeOiHR8/s1600-h/image%25255B3%25255D.png"><img style="display: block; float: none; margin-left: auto; margin-right: auto; border: 0px;" title="image" src="http://lh6.ggpht.com/-jSSpn0Ulqi0/UComWt61psI/AAAAAAAAAGI/lJ_1vASmgjM/image_thumb%25255B1%25255D.png?imgmax=800" alt="image" width="359" height="124" border="0" /></a></p>
<p>&nbsp;</p>
<p>In the table &ldquo;_MigrationHistory&rdquo; all migrations that where performed on this database are stored. That way you can always see what version of database this is. Also Entity Framework will need this information.</p>
<p>&nbsp;</p>
<p>Now let&rsquo;s assume that we want to add a BuildDate property to the Car. We can put this in a new migration. This way we can keep track of all our modifications in our database.</p>
<p>&nbsp;</p>
<h2>Change the Car entity.</h2>
<p>&nbsp;</p>
<pre class="code"><span style="color: blue;">public class </span><span style="color: #2b91af;">Car<br /></span>{<br />    <span style="color: blue;">public </span><span style="color: #2b91af;">Int32 </span>Id { <span style="color: blue;">get</span>; <span style="color: blue;">set</span>; }<br /><br />    <span style="color: blue;">public </span><span style="color: #2b91af;">String </span>Model { <span style="color: blue;">get</span>; <span style="color: blue;">set</span>; }<br /><br />    <span style="color: blue;">public </span><span style="color: #2b91af;">Make </span>Make { <span style="color: blue;">get</span>; <span style="color: blue;">set</span>; }<br /><br />    <span style="color: blue;">public </span><span style="color: #2b91af;">DateTime </span>BuildDate { <span style="color: blue;">get</span>; <span style="color: blue;">set</span>; }<br />}</pre>
<p>&nbsp;</p>
<h2>Add Migration</h2>
<p>&nbsp;</p>
<p>Type &ldquo;add-migration AddBuildDate&rdquo; in the Package Manager Console. This will create a new file in the Migration folder. The file name will contain the date + the name that we specified.</p>
<p>&nbsp;</p>
<p>This new file will contain 2 methods that we can override. The &ldquo;Up&rdquo; method will contain all new database modifications. The &ldquo;Down&rdquo; will contain the rollback of the modifications. This way we can easily &ldquo;jump&rdquo; through database versions. We manually add the AddColumn and DropColumn statements.</p>
<pre class="code"><span style="color: blue;">namespace </span>EF_DatabaseMigrations.Migrations<br />{<br />    <span style="color: blue;">public partial class </span><span style="color: #2b91af;">AddBuildDate </span>: <span style="color: #2b91af;">DbMigration<br />    </span>{<br />        <span style="color: blue;">public override void </span>Up()<br />        {<br />            AddColumn(<span style="color: #a31515;">"dbo.Cars"</span>, <span style="color: #a31515;">"BuildDate"</span>, c =&gt; c.DateTime(nullable: <span style="color: blue;">false</span>));<br />        }<br /><br />        <span style="color: blue;">public override void </span>Down()<br />        {<br />            DropColumn(<span style="color: #a31515;">"dbo.Cars"</span>, <span style="color: #a31515;">"BuildDate"</span>);<br />        }<br />    }<br />}</pre>
<p>&nbsp;</p>
<p>When we want to apply those modifications, we need to type &ldquo;update-database -TargetMigration:AddBuildDate&rdquo;. This will modify our database and add the new column.</p>
<p>&nbsp;</p>
<p><a href="http://lh3.ggpht.com/-mhKvKHmKl40/UComXMyADMI/AAAAAAAAAGQ/Om7QD66ViK0/s1600-h/image%25255B7%25255D.png"><img style="display: block; float: none; margin-left: auto; margin-right: auto; border: 0px;" title="image" src="http://lh6.ggpht.com/-Drk6QCNjNqw/UComX3YgBoI/AAAAAAAAAGY/SFqsI2KEIho/image_thumb%25255B3%25255D.png?imgmax=800" alt="image" width="628" height="116" border="0" /></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>If you want to rollback the database at it&rsquo;s begin state, you type &ldquo;update-database -TargetMigration:0&rdquo; in the Package Console Manager.</p>
<p>&nbsp;</p>
<h2>What about the database adminstrators</h2>
<p>&nbsp;</p>
<p>We can&rsquo;t forget these guys. They probably won&rsquo;t like this way of creating the database and would probably prefer a script. Well you can add an extra parameter to the &ldquo;update-database&rdquo; called script that will create a clean SQL script that performs all the necessary steps to create the database.</p>
<p>&nbsp;</p>
<p>&ldquo;update-database &ndash;TargetMigration:AddBuildDate &ndash;script&rdquo; will create this script:</p>
<pre class="code"><span style="color: blue;">ALTER TABLE </span><span style="color: teal;">[Cars] </span><span style="color: blue;">ADD </span><span style="color: teal;">[BuildDate] [datetime]<br /></span><span style="color: blue;">INSERT INTO </span><span style="color: teal;">[__MigrationHistory] </span><span style="color: gray;">(</span><span style="color: teal;">[MigrationId]</span><span style="color: gray;">, </span><span style="color: teal;">[Model]</span><span style="color: gray;">, </span><span style="color: teal;">[ProductVersion]</span><span style="color: gray;">) </span><span style="color: blue;">VALUES </span><span style="color: gray;">(</span><span style="color: red;">'201208140904052_AddBuildDate'</span><span style="color: gray;">, </span>0xspan style="color: gray;">, </span><span style="color: red;">'5.0.0-rc.net40'</span><span style="color: gray;">)<br /><br /></span></pre>
<p>&nbsp;</p>
<p>The Visual Studio solution can be downloaded <a href="http://dl.dropbox.com/u/41091233/Blog/Entity%20Framework%20Database%20Migrations/EF_DatabaseMigrations.rar" target="_blank">here</a>.</p>
