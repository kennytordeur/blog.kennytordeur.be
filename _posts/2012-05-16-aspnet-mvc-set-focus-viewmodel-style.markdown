---
layout: post
title: "ASP.NET MVC: Set Focus, ViewModel Style"
date: 2012-05-16 17:58:00 +0200
comments: true
published: true
categories: ["blog", "archives"]
tags: ["ASP.NET", "JQuery", "MVC"]
alias: ["/post/ASPNET-MVC-Set-Focus-ViewModel-Style", "/post/aspnet-mvc-set-focus-viewmodel-style"]
---
<!-- more -->
{% include imported_disclaimer.html %}
<p>In a recent Asp.Net MVC project i had to set a focus on a specific control, but it wasn&rsquo;t just a specific control. It was calculate in runtime by some conditions. I didn&rsquo;t just want to create an extra string property on the viewmodel where i could store the id of the control. Off course this would also work but i wanted something safer than those magic strings.</p>
<p>In one of my previous posts (<a href="http://kennytordeur.blogspot.com/2011/05/aspnet-mvc-where-is-clientid_10.html" target="_blank">Where is the ClientID?</a>), i was able to determine the Id that is created by the HtmlHelper to create a textbox, checkbox, &hellip;</p>
<pre class="code"><span style="color: blue;">public static class </span><span style="color: #2b91af;">HtmlHelper<br /></span>{<br />    <span style="color: blue;">public static </span><span style="color: #2b91af;">String </span>GetId&lt;TModel,TProperty&gt;( <span style="color: blue;">this </span><span style="color: #2b91af;">HtmlHelper</span>&lt;TModel&gt; htmlHelper, <span style="color: #2b91af;">Expression</span>&lt;<span style="color: #2b91af;">Func</span>&lt;TModel, TProperty&gt;&gt; expression )<br />    {<br />        <span style="color: blue;">return </span><span style="color: #2b91af;">TagBuilder</span>.CreateSanitizedId(<span style="color: #2b91af;">ExpressionHelper</span>.GetExpressionText(expression));<br />    }<br />}</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>So i created a property called Focus on my ViewModelBase class with the exacte same type,&nbsp; but for the return type of the function i take Object.</p>
<pre class="code"><span style="color: blue;">public abstract class </span><span style="color: #2b91af;">ViewModelBase</span>&lt;T&gt;<br />   {<br />       <span style="color: blue;">public </span><span style="color: #2b91af;">Expression</span>&lt;<span style="color: #2b91af;">Func</span>&lt;T,<span style="color: #2b91af;">Object</span>&gt;&gt;  Focus { <span style="color: blue;">get</span>; <span style="color: blue;">set</span>; }<br />   }</pre>
<pre class="code">&nbsp;</pre>
<p>&nbsp;</p>
<p>Then my PersonViewModel inherits from ViewModelBase&lt;T&gt; where T equals the PersonViewModel type. That way i have complete intellisence when i want to set the Focus property.</p>
<pre class="code"><span style="color: blue;">public class </span><span style="color: #2b91af;">PersonViewModel </span>: <span style="color: #2b91af;">ViewModelBase</span>&lt;<span style="color: #2b91af;">PersonViewModel</span>&gt;<br />    {<br />        <span style="color: blue;">public </span><span style="color: #2b91af;">String </span>Name { <span style="color: blue;">get</span>; <span style="color: blue;">set</span>; }<br /><br />        <span style="color: blue;">public </span><span style="color: #2b91af;">String </span>LastName { <span style="color: blue;">get</span>; <span style="color: blue;">set</span>; }<br />    }</pre>
<p>&nbsp;</p>
<p>At the view side, i&rsquo;ll use the GetId extension method to determine the id off the control i want to set the focus to.&nbsp; I&rsquo;ll pas the Focus property as parameter for this extension method. Then i&rsquo;ll use it&rsquo;s result in a JQuery selector and invoke the .focus() method.</p>
<pre class="code"><span style="background: yellow;">@model </span>ASP.NET_MVC_Set_Focus_ViewModel_Style.Models.<span style="color: #2b91af;">PersonViewModel<br /></span><span style="background: yellow;">@{<br /></span>    ViewBag.Title = <span style="color: #a31515;">"Index"</span>;<br /><span style="background: yellow;">}<br /></span><span style="color: blue;">&lt;</span><span style="color: maroon;">h2</span><span style="color: blue;">&gt;<br />    </span>Index<span style="color: blue;">&lt;/</span><span style="color: maroon;">h2</span><span style="color: blue;">&gt;<br /></span><span style="background: yellow;">@</span><span style="color: blue;">using </span>(Html.BeginForm())<br />{<br />    <span style="color: blue;">&lt;</span><span style="color: maroon;">table</span><span style="color: blue;">&gt;<br />        &lt;</span><span style="color: maroon;">tr</span><span style="color: blue;">&gt;<br />            &lt;</span><span style="color: maroon;">td</span><span style="color: blue;">&gt;<br />                </span>Name<br />            <span style="color: blue;">&lt;/</span><span style="color: maroon;">td</span><span style="color: blue;">&gt;<br />            &lt;</span><span style="color: maroon;">td</span><span style="color: blue;">&gt;<br />                </span><span style="background: yellow;">@</span>Html.TextBoxFor(m =&gt; m.Name)<br />            <span style="color: blue;">&lt;/</span><span style="color: maroon;">td</span><span style="color: blue;">&gt;<br />        &lt;/</span><span style="color: maroon;">tr</span><span style="color: blue;">&gt;<br />        &lt;</span><span style="color: maroon;">tr</span><span style="color: blue;">&gt;<br />            &lt;</span><span style="color: maroon;">td</span><span style="color: blue;">&gt;<br />                </span>Lastname<br />            <span style="color: blue;">&lt;/</span><span style="color: maroon;">td</span><span style="color: blue;">&gt;<br />            &lt;</span><span style="color: maroon;">td</span><span style="color: blue;">&gt;<br />                </span><span style="background: yellow;">@</span>Html.TextBoxFor(m =&gt; m.LastName)<br />            <span style="color: blue;">&lt;/</span><span style="color: maroon;">td</span><span style="color: blue;">&gt;<br />        &lt;/</span><span style="color: maroon;">tr</span><span style="color: blue;">&gt;<br />    &lt;/</span><span style="color: maroon;">table</span><span style="color: blue;">&gt;<br />    </span><span style="background: yellow;">@</span>Html.HiddenFor(m =&gt; m.Focus)<br />    <span style="color: blue;">&lt;</span><span style="color: maroon;">input </span><span style="color: red;">type</span><span style="color: blue;">="submit" </span><span style="color: red;">value</span><span style="color: blue;">="ChangeFocus" /&gt;<br /></span>}<br /><span style="color: blue;">&lt;</span><span style="color: maroon;">script </span><span style="color: red;">type</span><span style="color: blue;">="text/javascript"&gt;<br />    </span>$(document).ready(<span style="color: blue;">function </span>() {<br />        $(<span style="color: maroon;">"#</span><span style="background: yellow; color: maroon;">@</span>Html.GetId(Model.Focus)<span style="color: maroon;">"</span>).focus();<br />    });<br /><span style="color: blue;">&lt;/</span><span style="color: maroon;">script</span><span style="color: blue;">&gt;<br /></span></pre>
<p>&nbsp;</p>
<p>At the Controller side, on the HttpGet method, i&rsquo;ll set the focus on the Name. On the HttpPost method, i&rsquo;ll set the focus on LastName. That way you&rsquo;ll see the difference.</p>
<pre class="code"><span style="color: blue;">public class </span><span style="color: #2b91af;">HomeController </span>: <span style="color: #2b91af;">Controller<br />    </span>{<br />        [<span style="color: #2b91af;">HttpGet</span>]<br />        <span style="color: blue;">public </span><span style="color: #2b91af;">ActionResult </span>Index()<br />        {<br />            <span style="color: blue;">var </span>personViewModel = <span style="color: blue;">new </span><span style="color: #2b91af;">PersonViewModel</span>();<br /><br />            personViewModel.Focus = m =&gt; m.Name;<br /><br />            <span style="color: blue;">return </span>View(personViewModel);<br />        }<br /><br />        [<span style="color: #2b91af;">HttpPost</span>]<br />        <span style="color: blue;">public </span><span style="color: #2b91af;">ActionResult </span>Index(<span style="color: #2b91af;">PersonViewModel </span>personViewModel)<br />        {<br />            personViewModel.Focus = m =&gt; m.LastName;<br /><br />            <span style="color: blue;">return </span>View(personViewModel);<br />        }<br />    }</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>The main advantage is that you don&rsquo;t have to work with those magic strings. When the property is renamed or removed, i&rsquo;ll get a compiler error. And your code is cleaner.</p>
<p>&nbsp;</p>
<p>This code isn&rsquo;t rocket science but can be very handy. The solution can be downloaded from <a href="http://dl.dropbox.com/u/41091233/Blog/Asp.Net%20MVC%203%20Set%20Focus%20ViewModel%20Style/ASP.NET%20MVC%20Set%20Focus%20ViewModel%20Style.rar" target="_blank">here</a>.</p>
