---
layout: post
title: "Web Api: Passing a Complex type in JSON"
date: 2012-12-12 21:25:00 +0100
comments: true
published: true
categories: ["blog", "archives"]
tags: ["JQuery", "JSON", "MVC 4", "WebApi"]
alias: ["/post/Web-Api-Passing-a-Complex-type-in-JSON", "/post/web-api-passing-a-complex-type-in-json"]
---
<!-- more -->
{% include imported_disclaimer.html %}
<p>In one project i wanted to pass a complex type to the Post method of an Web Api controller. The Post itself will be done using JQuery in the JSON format. I noticed that the parameter was always null. After a bit of searching i found the solution.</p>
<h1>The Set Up</h1>
<h2>Server side</h2>
<h2>&nbsp;</h2>
<pre class="code"><span style="background: white; color: blue;">public class </span><span style="background: white; color: #2b91af;">ValuesController </span><span style="background: white; color: black;">: </span><span style="background: white; color: #2b91af;">ApiController<br />    </span><span style="background: white; color: black;">{<br />        </span><span style="background: white; color: green;">// POST api/values<br />        </span><span style="background: white; color: blue;">public void </span><span style="background: white; color: black;">Post(</span><span style="background: white; color: #2b91af;">MyComplexType </span><span style="background: white; color: black;">value)<br />        {<br />        }       <br />    }<br /><br />    </span><span style="background: white; color: blue;">public class </span><span style="background: white; color: #2b91af;">MyComplexType<br />    </span><span style="background: white; color: black;">{<br />        </span><span style="background: white; color: blue;">public string </span><span style="background: white; color: black;">Name { </span><span style="background: white; color: blue;">get</span><span style="background: white; color: black;">; </span><span style="background: white; color: blue;">set</span><span style="background: white; color: black;">; }<br /><br />        </span><span style="background: white; color: blue;">public </span><span style="background: white; color: #2b91af;">MyComplexSubType </span><span style="background: white; color: black;">MyComplexSubType { </span><span style="background: white; color: blue;">get</span><span style="background: white; color: black;">; </span><span style="background: white; color: blue;">set</span><span style="background: white; color: black;">; }<br />    }<br /><br />    </span><span style="background: white; color: blue;">public class </span><span style="background: white; color: #2b91af;">MyComplexSubType<br />    </span><span style="background: white; color: black;">{<br />        </span><span style="background: white; color: blue;">public int </span><span style="background: white; color: black;">Age { </span><span style="background: white; color: blue;">get</span><span style="background: white; color: black;">; </span><span style="background: white; color: blue;">set</span><span style="background: white; color: black;">; }<br />    }</span></pre>
<p>&nbsp;</p>
<h2>Client Side</h2>
<pre class="code"><span style="background: white; color: blue;">&lt;</span><span style="background: white; color: maroon;">script </span><span style="background: white; color: red;">type</span><span style="background: white; color: blue;">="text/javascript"&gt;<br /><br />        function </span><span style="background: white; color: black;">MyComplexSubType()<br />        {<br />            </span><span style="background: white; color: blue;">var </span><span style="background: white; color: black;">self = </span><span style="background: white; color: blue;">this</span><span style="background: white; color: black;">;<br /><br />            self.Age = 26;<br />        }<br /><br />        </span><span style="background: white; color: blue;">function </span><span style="background: white; color: black;">MyComplexType()<br />        {       <br />            </span><span style="background: white; color: blue;">var </span><span style="background: white; color: black;">self = </span><span style="background: white; color: blue;">this</span><span style="background: white; color: black;">;<br /><br />            self.Name = </span><span style="background: white; color: #a31515;">"Kenny Tordeur"</span><span style="background: white; color: black;">;<br />            self.MyComplexSubType = </span><span style="background: white; color: blue;">new </span><span style="background: white; color: black;">MyComplexSubType();<br />        }<br /><br /><br />        </span><span style="background: white; color: blue;">function </span><span style="background: white; color: black;">PostComplexType()<br />        {<br />            $.ajax(</span><span style="background: white; color: #a31515;">"/api/values"</span><span style="background: white; color: black;">, {<br />                data: JSON.stringify(</span><span style="background: white; color: blue;">new </span><span style="background: white; color: black;">MyComplexType()),<br />            contentType: </span><span style="background: white; color: #a31515;">'application/json'</span><span style="background: white; color: black;">,<br />            type: </span><span style="background: white; color: #a31515;">'POST'</span><span style="background: white; color: black;">,<br />            success: SendComplexTypeCallBack<br />        });<br />        }<br /><br /><br />        </span><span style="background: white; color: blue;">function </span><span style="background: white; color: black;">SendComplexTypeCallBack(data)<br />        {<br />            alert(</span><span style="background: white; color: #a31515;">"Complex type sended"</span><span style="background: white; color: black;">);<br />        }<br />    </span><span style="background: white; color: blue;">&lt;/</span><span style="background: white; color: maroon;">script</span><span style="background: white; color: blue;">&gt;</span></pre>
<p>&nbsp;</p>
<p>The PostComplexType will be trigged by a click event on a button. It will create a javascript object called MyComplexType. This object will map directly to the object we created on the server side.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="http://lh5.ggpht.com/-_r5UP0x3fJk/UMj2OLK48uI/AAAAAAAAAHk/s3PQtIfmkro/s1600-h/image%25255B13%25255D.png"><img style="float: none; margin-left: auto; display: block; margin-right: auto; border-width: 0px;" title="image" src="http://lh5.ggpht.com/-g9eHe8J1W-o/UMj2O7ChvdI/AAAAAAAAAHo/_uREauIfrQw/image_thumb%25255B9%25255D.png?imgmax=800" alt="image" width="1121" height="442" border="0" /></a></p>
<p>&nbsp;</p>
<h1>The missing link</h1>
<p>&nbsp;</p>
<p>With this set-up the parameter will always be null. We need to add a line of code to the global.asax.</p>
<pre class="code"><span style="background: white; color: #2b91af;">ValueProviderFactories</span><span style="background: white; color: black;">.Factories.Add(</span><span style="background: white; color: blue;">new </span><span style="background: white; color: #2b91af;">JsonValueProviderFactory</span><span style="background: white; color: black;">());</span></pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Value providers are used by the model binding system in MVC to populate the values of model objects. We basically add a provider that enables to bind a model to a JSON model.&nbsp; The solution can be downloaded <a href="http://dl.dropbox.com/u/41091233/Blog/WebApi%20Complex%20Parameter/WebApi%20Complex%20Parameter.rar" target="_blank">here</a>.</p>
